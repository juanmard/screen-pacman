// Code generated by Icestudio 0.3.3-rc
// Mon, 30 Jul 2018 02:49:29 GMT

`default_nettype none

module main #(
 parameter vc429e4 = 62,
 parameter v3c2ffb = 3'b100
) (
 input v60e8e8,
 input vclk,
 output v5232a0,
 output vd9235d,
 output vabb3e2,
 output ved4d00,
 output v30c483
);
 localparam p5 = v3c2ffb;
 localparam p6 = vc429e4;
 wire w0;
 wire w1;
 wire w2;
 wire w3;
 wire w4;
 wire [0:22] w7;
 wire w8;
 wire w9;
 wire [0:25] w10;
 wire [0:22] w11;
 wire [0:25] w12;
 wire w13;
 wire [0:7] w14;
 wire [0:7] w15;
 wire w16;
 wire w17;
 wire w18;
 wire w19;
 wire w20;
 wire w21;
 wire w22;
 wire w23;
 assign ved4d00 = w0;
 assign vd9235d = w1;
 assign v5232a0 = w2;
 assign vabb3e2 = w3;
 assign v30c483 = w4;
 assign w13 = v60e8e8;
 assign w20 = vclk;
 assign w21 = vclk;
 assign w22 = vclk;
 assign w23 = vclk;
 assign w9 = w8;
 assign w11 = w7;
 assign w21 = w20;
 assign w22 = w20;
 assign w22 = w21;
 assign w23 = w20;
 assign w23 = w21;
 assign w23 = w22;
 v7d29b1 v063e26 (
  .v706449(w0),
  .v2bfeec(w1),
  .v88adbc(w2),
  .vd7ac4a(w3),
  .vdb6628(w4),
  .v879a71(w12)
 );
 ve304dc #(
  .va5f5b2(p6)
 ) v9d4710 (
  .v61abb6(w7),
  .v6f78a5(w8),
  .vd91ab0(w20)
 );
 v6663b8 #(
  .vb8d3ae(p5)
 ) v287eca (
  .vca3201(w7),
  .v1bb1ad(w8),
  .v2761a5(w10)
 );
 v429fbc v1c38a6 (
  .vdf4472(w11),
  .v32d6d9(w19)
 );
 vc4dd08 vfec004 (
  .v608bd9(w18)
 );
 vf8a63b ve09c26 (
  .v129887(w13),
  .vb9ff0a(w14),
  .va8a6b1(w16),
  .v2cc5f5(w21)
 );
 main_veaf5aa veaf5aa (
  .data(w14),
  .control(w15),
  .rcv(w17)
 );
 v8b89a5 v110163 (
  .vef4cea(w16),
  .vc24d9f(w17),
  .vb55943(w22)
 );
 vc94732 vc712e3 (
  .vdd1857(w9),
  .ve87cf9(w10),
  .v16dd7b(w12),
  .vaab52b(w15),
  .v655c16(w18),
  .ve5424d(w19),
  .v3991dc(w23)
 );
endmodule

module v7d29b1 (
 input [25:0] v879a71,
 output v88adbc,
 output v2bfeec,
 output vd7ac4a,
 output v706449,
 output vdb6628
);
 wire w0;
 wire w1;
 wire w2;
 wire w3;
 wire w4;
 wire [0:25] w5;
 assign v88adbc = w0;
 assign v2bfeec = w1;
 assign vd7ac4a = w2;
 assign v706449 = w3;
 assign vdb6628 = w4;
 assign w5 = v879a71;
 v7d29b1_vbebd3d vbebd3d (
  .VSync(w0),
  .HSync(w1),
  .Red(w2),
  .Green(w3),
  .Blue(w4),
  .RGBStr_i(w5)
 );
endmodule

module v7d29b1_vbebd3d (
 input [25:0] RGBStr_i,
 output VSync,
 output HSync,
 output Red,
 output Green,
 output Blue
);
 // @include Pxs.vh
 // @include PxsVGAComp.v
 
 
 //-- Instantiate  PxsVGAComp module.
 PxsVGAComp 
  PxsVGAComp1(
 			RGBStr_i,	// HSync, VSync, XCoord, YCoord, ActiveVideo, RGB(1:1:1)
             HSync,      // Horizontal sync out
             VSync,      // Vertical sync out
             Red,        // RED vga output
             Green,      // GREEN vga output
             Blue        // BLUE vga output
     );
 
endmodule

module ve304dc #(
 parameter va5f5b2 = 62
) (
 input vd91ab0,
 output v6f78a5,
 output [22:0] v61abb6
);
 localparam p8 = va5f5b2;
 wire w0;
 wire w1;
 wire w2;
 wire w3;
 wire [0:22] w4;
 wire w5;
 wire [0:9] w6;
 wire [0:9] w7;
 assign w0 = vd91ab0;
 assign v6f78a5 = w1;
 assign v61abb6 = w4;
 v691d98 v76bfc0 (
  .v7964d5(w2),
  .v2fd51b(w3),
  .vcd0644(w4),
  .v372172(w5),
  .vf2cc41(w6),
  .v1f8542(w7)
 );
 vb78b9d #(
  .v8ad028(p8)
 ) v118e86 (
  .v7dbbbb(w0),
  .v9987be(w1),
  .v501546(w2),
  .vcbba55(w3),
  .v83ac33(w5),
  .v8a68e1(w6),
  .vf3ae84(w7)
 );
endmodule

module v691d98 (
 input v2fd51b,
 input v372172,
 input v7964d5,
 input [9:0] vf2cc41,
 input [9:0] v1f8542,
 output [22:0] vcd0644
);
 wire w0;
 wire w1;
 wire w2;
 wire [0:9] w3;
 wire [0:9] w4;
 wire [0:22] w5;
 assign w0 = v2fd51b;
 assign w1 = v372172;
 assign w2 = v7964d5;
 assign w3 = vf2cc41;
 assign w4 = v1f8542;
 assign vcd0644 = w5;
 v691d98_vbebd3d vbebd3d (
  .VSync(w0),
  .HSync(w1),
  .ActiveVideo(w2),
  .XCoord(w3),
  .YCoord(w4),
  .VGAStr(w5)
 );
endmodule

module v691d98_vbebd3d (
 input VSync,
 input HSync,
 input ActiveVideo,
 input [9:0] XCoord,
 input [9:0] YCoord,
 output [22:0] VGAStr
);
 // @include PxsStrVGAJoin.v
 
 
 //-- Instantiate PxsStrVGAJoin module.
 PxsStrVGAJoin 
 PxsStrVGAJoin1(
 	HSync,         // Horizontal sync out
     VSync,         // Vertical sync out
     XCoord,          // ScanX postion
     YCoord,          // ScanY position 
     ActiveVideo,
 	VGAStr	// HSync, VSync, XCoord, YCoord, ActiveVideo, RGB(1:1:1)
     );
 
endmodule

module vb78b9d #(
 parameter v8ad028 = 62
) (
 input v7dbbbb,
 output v9987be,
 output vcbba55,
 output v83ac33,
 output v501546,
 output [9:0] v8a68e1,
 output [9:0] vf3ae84
);
 localparam p1 = v8ad028;
 wire w0;
 wire w2;
 wire w3;
 wire w4;
 wire w5;
 wire [0:9] w6;
 wire [0:9] w7;
 assign w0 = v7dbbbb;
 assign v9987be = w2;
 assign vcbba55 = w3;
 assign v83ac33 = w4;
 assign v501546 = w5;
 assign v8a68e1 = w6;
 assign vf3ae84 = w7;
 vb78b9d_vb4a5e4 #(
  .FDivider(p1)
 ) vb4a5e4 (
  .clk(w0),
  .px_clk(w2),
  .vsync(w3),
  .hsync(w4),
  .activevideo(w5),
  .x_px(w6),
  .y_px(w7)
 );
endmodule

module vb78b9d_vb4a5e4 #(
 parameter FDivider = 0
) (
 input clk,
 output px_clk,
 output vsync,
 output hsync,
 output activevideo,
 output [9:0] x_px,
 output [9:0] y_px
);
 // @include VGASyncGen.v
 
 
 //-- Instantiate VgaSyncGenr module.
 VGASyncGen #(FDivider)
 VGASyncGen1 (
     clk,                // System clock.
     hsync,              // Horizontal syncro.
     vsync,              // Vertical syncro.
     x_px,               // Actual x pixel.
     y_px,               // Actual y pixel.
     activevideo,        // Active video.
     px_clk              // Pixel clock 31.5Mhz (PLL).
     );
 
endmodule

module v6663b8 #(
 parameter vb8d3ae = 3'b001
) (
 input v1bb1ad,
 input [22:0] vca3201,
 output [25:0] v2761a5
);
 localparam p3 = vb8d3ae;
 wire w0;
 wire [0:25] w1;
 wire [0:22] w2;
 assign w0 = v1bb1ad;
 assign v2761a5 = w1;
 assign w2 = vca3201;
 v6663b8_vbebd3d #(
  .color(p3)
 ) vbebd3d (
  .px_clk(w0),
  .RGBStr_o(w1),
  .VGAStr_i(w2)
 );
endmodule

module v6663b8_vbebd3d #(
 parameter color = 0
) (
 input px_clk,
 input [22:0] VGAStr_i,
 output [25:0] RGBStr_o
);
 // @include PxsConstant.v
 
 
 //-- Instantiate PxsConstant module.
 PxsConstant #(
 .color(color)
 )
 PxsConstant1(
     px_clk,
     VGAStr_i,
     RGBStr_o
     );
 
endmodule

module v429fbc #(
 parameter vcbc232 = 640,
 parameter vd99934 = 480
) (
 input [22:0] vdf4472,
 output v32d6d9
);
 localparam p2 = vcbc232;
 localparam p3 = vd99934;
 wire w0;
 wire [0:22] w1;
 assign v32d6d9 = w0;
 assign w1 = vdf4472;
 v429fbc_v0c69d3 #(
  .width_screen(p2),
  .height_screen(p3)
 ) v0c69d3 (
  .endframe(w0),
  .VGAStr_i(w1)
 );
endmodule

module v429fbc_v0c69d3 #(
 parameter width_screen = 0,
 parameter height_screen = 0
) (
 input [22:0] VGAStr_i,
 output endframe
);
 // Alias in stream.
 `define XC 22:13
 `define YC 12:3
 
 // Check endframe.
 assign  endframe = ((VGAStr_i[`XC]==width_screen-1) && (VGAStr_i[`YC]==height_screen-1)) ? 1'b1 : 1'b0;
 
endmodule

module vc4dd08 (
 output v608bd9
);
 wire w0;
 assign v608bd9 = w0;
 vc4dd08_v68c173 v68c173 (
  .v(w0)
 );
endmodule

module vc4dd08_v68c173 (
 output v
);
 // Bit 0
 
 assign v = 1'b0;
endmodule

module vf8a63b (
 input v2cc5f5,
 input v129887,
 output va8a6b1,
 output [7:0] vb9ff0a
);
 wire w0;
 wire [0:7] w1;
 wire [0:7] w2;
 wire [0:9] w3;
 wire w4;
 wire w5;
 wire w6;
 wire w7;
 wire w8;
 wire w9;
 wire w10;
 wire w11;
 wire w12;
 wire w13;
 wire w14;
 wire w15;
 assign w0 = v129887;
 assign vb9ff0a = w1;
 assign va8a6b1 = w6;
 assign w8 = v2cc5f5;
 assign w9 = v2cc5f5;
 assign w10 = v2cc5f5;
 assign w11 = v2cc5f5;
 assign w14 = v2cc5f5;
 assign w9 = w8;
 assign w10 = w8;
 assign w10 = w9;
 assign w11 = w8;
 assign w11 = w9;
 assign w11 = w10;
 assign w12 = w7;
 assign w14 = w8;
 assign w14 = w9;
 assign w14 = w10;
 assign w14 = w11;
 assign w15 = w4;
 v5d56f1 vfa7fb3 (
  .v74a653(w0),
  .vc6ae1f(w7),
  .vd7ce19(w10)
 );
 vb66984 v3527f2 (
  .v426b31(w2),
  .v25b980(w3)
 );
 v239306 vfb3110 (
  .v02ed6f(w1),
  .va3ae6b(w2),
  .va31c0f(w11),
  .vc21fb3(w13)
 );
 v1c3bf0 v1e089e (
  .v577640(w3),
  .ve9e73c(w12),
  .v9a7ca3(w14),
  .v9cf23f(w15)
 );
 vdd29f1 v42c967 (
  .vdfd85c(w4),
  .va119a9(w5),
  .vcea413(w8)
 );
 v9c7988 v8d7ef7 (
  .vf759b2(w4),
  .vab7795(w5),
  .v184932(w6),
  .va431f5(w7),
  .v00dabd(w9),
  .vdd5660(w13)
 );
endmodule

module v5d56f1 (
 input vd7ce19,
 input v74a653,
 output vc6ae1f
);
 wire w0;
 wire w1;
 wire w2;
 assign vc6ae1f = w0;
 assign w1 = vd7ce19;
 assign w2 = v74a653;
 vf031e4 v53b48b (
  .vc6ae1f(w0),
  .vd7ce19(w1),
  .v74a653(w2)
 );
endmodule

module vf031e4 #(
 parameter vab1fa2 = 1
) (
 input vd7ce19,
 input v74a653,
 output vc6ae1f
);
 localparam p0 = vab1fa2;
 wire w1;
 wire w2;
 wire w3;
 assign w1 = vd7ce19;
 assign w2 = v74a653;
 assign vc6ae1f = w3;
 v7bd255 #(
  .v38488b(p0)
 ) v4746ff (
  .vb55943(w1),
  .vef4cea(w2),
  .vc24d9f(w3)
 );
endmodule

module v7bd255 #(
 parameter v38488b = 0
) (
 input vb55943,
 input vef4cea,
 output vc24d9f
);
 localparam p3 = v38488b;
 wire w0;
 wire w1;
 wire w2;
 assign w0 = vef4cea;
 assign w1 = vb55943;
 assign vc24d9f = w2;
 v7bd255_v526aa2 #(
  .DINI(p3)
 ) v526aa2 (
  .d(w0),
  .clk(w1),
  .q(w2)
 );
endmodule

module v7bd255_v526aa2 #(
 parameter DINI = 0
) (
 input clk,
 input d,
 output q
);
 // D flip-flop
 // parameter DINI = 0;
 
 reg q = DINI;
 
 always @(posedge clk)
 begin
   q <= d;
 end
 
 
endmodule

module vb66984 (
 input [9:0] v25b980,
 output v2df079,
 output [7:0] v426b31,
 output v1e375b
);
 wire [0:7] w0;
 wire w1;
 wire w2;
 wire [0:9] w3;
 assign v426b31 = w0;
 assign v2df079 = w1;
 assign v1e375b = w2;
 assign w3 = v25b980;
 vb66984_v8e4e19 v8e4e19 (
  .o(w0),
  .H(w1),
  .L(w2),
  .i(w3)
 );
endmodule

module vb66984_v8e4e19 (
 input [9:0] i,
 output H,
 output [7:0] o,
 output L
);
 assign o = i[8:1];
endmodule

module v239306 (
 input va31c0f,
 input vc21fb3,
 input [7:0] va3ae6b,
 output [7:0] v02ed6f
);
 wire [0:7] w0;
 wire [0:7] w1;
 wire w2;
 wire w3;
 assign w0 = va3ae6b;
 assign v02ed6f = w1;
 assign w2 = va31c0f;
 assign w3 = vc21fb3;
 v239306_va6d58d va6d58d (
  .di(w0),
  .do(w1),
  .clk(w2),
  .load(w3)
 );
endmodule

module v239306_va6d58d (
 input clk,
 input load,
 input [7:0] di,
 output [7:0] do
);
 reg [7:0] do = 8'h00;
 
 always @(posedge clk)
   if (load)
     do <= di;
endmodule

module v1c3bf0 (
 input v9a7ca3,
 input v9cf23f,
 input ve9e73c,
 output [9:0] v577640
);
 wire w0;
 wire w1;
 wire w2;
 wire [0:9] w3;
 assign w0 = v9a7ca3;
 assign w1 = v9cf23f;
 assign w2 = ve9e73c;
 assign v577640 = w3;
 v1c3bf0_v2b88be v2b88be (
  .clk(w0),
  .clk_baud(w1),
  .ser_in(w2),
  .data(w3)
 );
endmodule

module v1c3bf0_v2b88be (
 input clk,
 input clk_baud,
 input ser_in,
 output [9:0] data
);
 reg [9:0] raw_data = 10'h0;
 
 
 always @(posedge clk)
   if (clk_baud == 1)
     raw_data <= {ser_in, raw_data[9:1]};
     
 assign data = raw_data;
endmodule

module vdd29f1 (
 input vcea413,
 input va119a9,
 output vdfd85c
);
 wire w0;
 wire w1;
 wire w2;
 assign w0 = vcea413;
 assign w1 = va119a9;
 assign vdfd85c = w2;
 vdd29f1_vae58ad vae58ad (
  .clk(w0),
  .clk_ena(w1),
  .clk_out(w2)
 );
endmodule

module vdd29f1_vae58ad (
 input clk,
 input clk_ena,
 output clk_out
);
 //-- Constants for obtaining standard BAURATES:
 `define B115200 139 //16Mhz
 `define B57600  208
 `define B38400  313
 
 `define B19200  625
 `define B9600   1250
 `define B4800   2500
 `define B2400   5000
 `define B1200   10000
 `define B600    20000
 `define B300    40000
 
 
 localparam BAUDRATE = `B115200;
 
 //-- Number of bits needed for storing the baudrate divisor
 localparam N = $clog2(BAUDRATE);
 
 //-- Value for generating the pulse in the middle of the period
 localparam M2 = (BAUDRATE >> 1);
 
 //-- Counter for implementing the divisor (it is a BAUDRATE module counter)
 //-- (when BAUDRATE is reached, it start again from 0)
 reg [N-1:0] divcounter = 0;
 
 //-- Contador módulo M
 always @(posedge clk)
 
   if (clk_ena)
     //-- Normal working: counting. When the maximum count is reached, it starts from 0
     divcounter <= (divcounter == BAUDRATE - 1) ? 0 : divcounter + 1;
   else
     //-- Counter fixed to its maximum value
     //-- When it is resumed it start from 0
     divcounter <= BAUDRATE - 1;
 
 //-- The output is 1 when the counter is in the middle of the period, if clk_ena is active
 //-- It is 1 only for one system clock cycle
 assign clk_out = (divcounter == M2) ? clk_ena : 0;
endmodule

module v9c7988 (
 input v00dabd,
 input vf759b2,
 input va431f5,
 output vab7795,
 output v184932,
 output vdd5660
);
 wire w0;
 wire [0:3] w1;
 wire w2;
 wire w3;
 wire w4;
 wire w5;
 wire w6;
 wire w7;
 wire w8;
 assign w2 = vf759b2;
 assign w3 = v00dabd;
 assign w4 = v00dabd;
 assign vab7795 = w5;
 assign v184932 = w6;
 assign vdd5660 = w7;
 assign w8 = va431f5;
 assign w4 = w3;
 vbfd6e2 v378cee (
  .v43dc18(w0),
  .v4dac78(w1),
  .va7f01e(w2),
  .v7b4936(w4)
 );
 v9c7988_va3d07e va3d07e (
  .clear(w0),
  .bitc(w1),
  .clk(w3),
  .bauden(w5),
  .rcv(w6),
  .load(w7),
  .rx_r(w8)
 );
endmodule

module v9c7988_va3d07e (
 input clk,
 input [3:0] bitc,
 input rx_r,
 output clear,
 output bauden,
 output rcv,
 output load
);
 //-------------------------------------------
 //-- CONTROLLER  (Finite state machine)
 //-------------------------------------------
 
 //-- Receiver states
 localparam IDLE = 2'd0;  //-- IDLEde reposo
 localparam RECV = 2'd1;  //-- Receiving data
 localparam LOAD = 2'd2;  //-- Storing the character received
 localparam DAV = 2'd3;   //-- Data is available
 
 //-- Control signals
 reg bauden = 0;  //-- Enable the baud generator
 reg clear = 0;   //-- Clear the bit counter
 reg load = 0;    //-- Load the received character into the data register
 reg rcv;
 
 //-- fsm states
 reg [1:0] state = IDLE;
 reg [1:0] next_state;
 
 //-- Transition between states
 always @(posedge clk)
     state <= next_state;
 
 //-- Control signal generation and next states
 always @(*) begin
 
   //-- Default values
   next_state = state;      //-- Stay in the same state by default
   bauden = 0;
   clear = 0;
   load = 0;
 
   case(state)
 
     //-- Idle state
     //-- Remain in this state until a start bit is received in rx_r
     IDLE: begin
       clear = 1;
       rcv = 0;
       if (rx_r == 0)
         next_state = RECV;
     end
 
     //-- Receiving state
     //-- Turn on the baud generator and wait for the serial package to be received
     RECV: begin
       bauden = 1;
       rcv = 0;
       if (bitc == 4'd10)
         next_state = LOAD;
     end
 
     //-- Store the received character in the data register (1 cycle)
     LOAD: begin
       load = 1;
       rcv = 0;
       next_state = DAV;
     end
 
     //-- Data Available (1 cycle)
     DAV: begin
       rcv = 1;
       next_state = IDLE;
     end
 
     default:
       rcv = 0;
 
   endcase
 
 end
 
endmodule

module vbfd6e2 (
 input v7b4936,
 input v43dc18,
 input va7f01e,
 output [3:0] v4dac78
);
 wire [0:3] w0;
 wire w1;
 wire w2;
 wire w3;
 assign v4dac78 = w0;
 assign w1 = v7b4936;
 assign w2 = v43dc18;
 assign w3 = va7f01e;
 vbfd6e2_vf1519a vf1519a (
  .bitc(w0),
  .clk(w1),
  .rst(w2),
  .clk_baud(w3)
 );
endmodule

module vbfd6e2_vf1519a (
 input clk,
 input rst,
 input clk_baud,
 output [3:0] bitc
);
 reg [3:0] _bitc = 0;
 
 always @(posedge clk)
   if (rst)
     _bitc <= 4'd0;
   else if (rst == 0 && clk_baud == 1)
     _bitc <= _bitc + 1;
     
     assign bitc = _bitc;
 
endmodule

module v8b89a5 (
 input vb55943,
 input vef4cea,
 output vc24d9f
);
 wire w0;
 wire w1;
 wire w2;
 assign w0 = vef4cea;
 assign w1 = vb55943;
 assign vc24d9f = w2;
 v8b89a5_v526aa2 v526aa2 (
  .d(w0),
  .clk(w1),
  .q(w2)
 );
endmodule

module v8b89a5_v526aa2 (
 input clk,
 input d,
 output q
);
 // D flip-flop
 
 reg q = 1'b0;
 
 always @(posedge clk)
 begin
   q <= d;
 end
 
 
endmodule

module vc94732 (
 input vdd1857,
 input [25:0] ve87cf9,
 input v3991dc,
 input v655c16,
 input ve5424d,
 input [7:0] vaab52b,
 output [25:0] v16dd7b
);
 wire [0:7] w0;
 wire w1;
 wire [0:25] w2;
 wire [0:25] w3;
 wire w4;
 wire w5;
 wire w6;
 wire w7;
 wire w8;
 wire w9;
 wire w10;
 wire [0:11] w11;
 wire [0:7] w12;
 wire [0:11] w13;
 wire [0:7] w14;
 wire [0:11] w15;
 wire [0:7] w16;
 wire w17;
 wire w18;
 wire w19;
 wire [0:2] w20;
 wire w21;
 assign w0 = vaab52b;
 assign w1 = vdd1857;
 assign w2 = ve87cf9;
 assign v16dd7b = w3;
 assign w5 = v3991dc;
 assign w6 = v655c16;
 assign w7 = ve5424d;
 assign w8 = v3991dc;
 assign w9 = v655c16;
 assign w10 = ve5424d;
 assign w19 = ve5424d;
 assign w8 = w5;
 assign w9 = w6;
 assign w10 = w7;
 assign w19 = w7;
 assign w19 = w10;
 v0974f8 v26981b (
  .vdd1857(w1),
  .ve87cf9(w2),
  .v16dd7b(w3),
  .v86d7a2(w4),
  .v32ffa0(w15),
  .v5f213f(w16),
  .v0d69f5(w21)
 );
 vc4dd08 v103f68 (
  .v608bd9(w4)
 );
 v8c21cf v587fe2 (
  .vaab52b(w0),
  .v0d69f5(w5),
  .v02d3c7(w6),
  .v612a7d(w7),
  .v960b1d(w11),
  .v627a06(w12),
  .v5b68ad(w17)
 );
 v7fa690 vf1e66e (
  .vd8bf03(w11),
  .va2a83c(w12),
  .vc3b221(w13),
  .vcbe203(w14),
  .v1dc765(w15),
  .vb67085(w16),
  .v9645d6(w20)
 );
 v5a297d vec2e1b (
  .v0d69f5(w8),
  .v02d3c7(w9),
  .v612a7d(w10),
  .v960b1d(w13),
  .v627a06(w14),
  .v5b68ad(w18)
 );
 vc94732_vdda496 vdda496 (
  .write_0(w17),
  .write_1(w18),
  .frame(w19),
  .select(w20),
  .write(w21)
 );
endmodule

module vc94732_vdda496 (
 input frame,
 input write_0,
 input write_1,
 output [2:0] select,
 output write
);
 reg [2:0] counter = 0;
 reg write;
 
 assign select = counter;
 
 always @(posedge frame)
 begin
     case (counter)
         0:
             write <= write_0;
         1:
             write <= write_1;
         default:
             write <= 1'b0;
     endcase
     counter <= counter + 1;
     if (counter > 1) counter <= 0;
 end
endmodule

module v0974f8 (
 input vdd1857,
 input [25:0] ve87cf9,
 input [11:0] v32ffa0,
 input [7:0] v5f213f,
 input v86d7a2,
 input v0d69f5,
 output [25:0] v16dd7b,
 output [7:0] ve94c8f,
 output v52218c
);
 wire w0;
 wire [0:25] w1;
 wire w2;
 wire [0:25] w3;
 wire w4;
 wire w5;
 wire [0:10] w6;
 wire [0:7] w7;
 wire [0:7] w8;
 wire w9;
 wire [0:10] w10;
 wire [0:10] w11;
 wire [0:10] w12;
 wire [0:25] w13;
 wire [0:25] w14;
 wire [0:7] w15;
 wire [0:7] w16;
 wire w17;
 wire w18;
 wire w19;
 wire w20;
 wire [0:11] w21;
 assign w0 = vdd1857;
 assign v16dd7b = w1;
 assign w2 = vdd1857;
 assign w3 = ve87cf9;
 assign w4 = vdd1857;
 assign w5 = v0d69f5;
 assign w7 = v5f213f;
 assign w9 = vdd1857;
 assign ve94c8f = w16;
 assign w17 = v86d7a2;
 assign v52218c = w18;
 assign w19 = v86d7a2;
 assign w21 = v32ffa0;
 assign w2 = w0;
 assign w4 = w0;
 assign w4 = w2;
 assign w9 = w0;
 assign w9 = w2;
 assign w9 = w4;
 assign w11 = w6;
 assign w15 = w8;
 assign w19 = w17;
 vff2ebf vd527df (
  .va1d85e(w2),
  .v5a8513(w5),
  .vf0a2de(w6),
  .v5943db(w7),
  .v002f62(w8),
  .v7b2f9b(w12)
 );
 v0974f8_v71b70f v71b70f (
  .px_clk(w9),
  .RGBStr_i(w13),
  .RGBStr_o(w14)
 );
 v9ba9b8 v581fe7 (
  .vdd1857(w0),
  .v16dd7b(w1),
  .v65b417(w8),
  .ve87cf9(w14)
 );
 v0974f8_va5fbe0 va5fbe0 (
  .raddr_video(w10),
  .raddr_control(w11),
  .raddr(w12),
  .select(w19)
 );
 v0974f8_v30877f v30877f (
  .RGBStr_i(w3),
  .px_clk(w4),
  .raddr(w10),
  .RGBStr_o(w13),
  .busy(w20)
 );
 v0974f8_v65095a v65095a (
  .sprite_i(w15),
  .sprite_o(w16),
  .get(w17),
  .ready(w18),
  .busy(w20)
 );
 v0974f8_v1d8a4b v1d8a4b (
  .waddr(w6),
  .position(w21)
 );
endmodule

module v0974f8_v71b70f (
 input px_clk,
 input [25:0] RGBStr_i,
 output [25:0] RGBStr_o
);
 reg [25:0] RGBStr_o;
 
 always @(px_clk)
 begin
     RGBStr_o <= RGBStr_i;
 end
endmodule

module v0974f8_va5fbe0 (
 input [10:0] raddr_video,
 input [10:0] raddr_control,
 input select,
 output [10:0] raddr
);
 assign raddr = (select) ? raddr_control : raddr_video;
endmodule

module v0974f8_v30877f (
 input px_clk,
 input [25:0] RGBStr_i,
 output [25:0] RGBStr_o,
 output busy,
 output [10:0] raddr
);
 `define YC 12:3			// Y Coordinate
 `define XC 22:13		// X Coordinate
 
 reg [10:0] raddr;
 reg [25:0] RGBStr_o;
 reg busy;
 
 always @(px_clk)
 begin
     RGBStr_o <= RGBStr_i;
     
     if (RGBStr_i[0:0])      // Visible pixel.
     begin
         raddr <= RGBStr_i[12:7]*40 + RGBStr_i[22:17];
         busy <= 1;
     end
     else
     begin
         busy <= 0;
     end
 end
endmodule

module v0974f8_v65095a (
 input [7:0] sprite_i,
 input get,
 input busy,
 output [7:0] sprite_o,
 output ready
);
 reg [7:0] sprite_o;
 reg ready;
 
 always @(negedge busy)
 begin
     if (get)
     begin
         sprite_o <= sprite_i;
         ready <= 1'b1;
     end
     else
         ready <= 1'b0;
 end
endmodule

module v0974f8_v1d8a4b (
 input [11:0] position,
 output [10:0] waddr
);
 // Calcula la dirección en el tablero.
 //
 assign waddr = position[5:0]*40 + position[11:6];
endmodule

module vff2ebf #(
 parameter va63311 = "inittab.list"
) (
 input va1d85e,
 input [10:0] v7b2f9b,
 input [7:0] v5943db,
 input v5a8513,
 input [10:0] vf0a2de,
 output [7:0] v002f62
);
 localparam p4 = va63311;
 wire w0;
 wire w1;
 wire [0:10] w2;
 wire [0:10] w3;
 wire [0:7] w5;
 wire [0:7] w6;
 assign w0 = va1d85e;
 assign w1 = v5a8513;
 assign w2 = vf0a2de;
 assign w3 = v7b2f9b;
 assign w5 = v5943db;
 assign v002f62 = w6;
 vff2ebf_v629585 #(
  .TABFILE(p4)
 ) v629585 (
  .px_clk(w0),
  .write_en(w1),
  .waddr(w2),
  .raddr(w3),
  .din(w5),
  .dout(w6)
 );
endmodule

module vff2ebf_v629585 #(
 parameter TABFILE = 0
) (
 input px_clk,
 input [10:0] raddr,
 input [7:0] din,
 input write_en,
 input [10:0] waddr,
 output [7:0] dout
);
 //@include TableRAM.v
 
 TableRAM
 #(
 .FILE(TABFILE)
 )
 TableRAM_01
 (
     px_clk,
     din,
     write_en,
     waddr,
     raddr,
     dout
 );
endmodule

module v9ba9b8 (
 input vdd1857,
 input [25:0] ve87cf9,
 input [7:0] v65b417,
 output [25:0] v16dd7b
);
 wire w0;
 wire w1;
 wire [0:3] w2;
 wire [0:25] w3;
 wire [0:25] w4;
 wire [0:7] w5;
 wire w6;
 wire w7;
 wire [0:11] w8;
 wire [0:25] w9;
 wire [0:25] w10;
 assign w0 = vdd1857;
 assign w1 = vdd1857;
 assign w3 = ve87cf9;
 assign v16dd7b = w4;
 assign w5 = v65b417;
 assign w6 = vdd1857;
 assign w7 = vdd1857;
 assign w1 = w0;
 assign w6 = w0;
 assign w6 = w1;
 assign w7 = w0;
 assign w7 = w1;
 assign w7 = w6;
 v9ba9b8_v2ed08c v2ed08c (
  .pixel(w2),
  .RGBStr_o(w4),
  .px_clk(w6),
  .RGBStr_i(w10)
 );
 v9ba9b8_vd99fae vd99fae (
  .px_clk(w7),
  .RGBStr_i(w9),
  .RGBStr_o(w10)
 );
 vc2642c vddfecb (
  .v2ff132(w0),
  .v80a7ca(w2),
  .ve1a960(w8)
 );
 v9ba9b8_v269c31 v269c31 (
  .px_clk(w1),
  .RGBStr_i(w3),
  .sprite(w5),
  .addr(w8),
  .RGBStr_o(w9)
 );
endmodule

module v9ba9b8_v2ed08c (
 input px_clk,
 input [3:0] pixel,
 input [25:0] RGBStr_i,
 output [25:0] RGBStr_o
);
 `define RGB 25:23		// Pixel RGB (1:1:1)
 `define Active 0:0 		// ActiveVideo
 
 reg [25:0] RGBStr_o;
 
 always @(px_clk)
 begin
     RGBStr_o <= RGBStr_i;
     if (RGBStr_i[`Active])
         RGBStr_o[`RGB] <= pixel[2:0];  // Only three pixels for color.
     else
         RGBStr_o[`RGB] <= 3'b000;
 end
 
endmodule

module v9ba9b8_vd99fae (
 input px_clk,
 input [25:0] RGBStr_i,
 output [25:0] RGBStr_o
);
 reg [25:0] RGBStr_o;
 
 always @(px_clk)
 begin
     RGBStr_o <= RGBStr_i;
 end
endmodule

module v9ba9b8_v269c31 (
 input px_clk,
 input [25:0] RGBStr_i,
 input [7:0] sprite,
 output [11:0] addr,
 output [25:0] RGBStr_o
);
 //@include TestCodeA.v
 
 TestCodeA
 TestCodeA_01
 (
     px_clk,
     RGBStr_i,
     sprite,
     addr,
     RGBStr_o
 );
endmodule

module vc2642c #(
 parameter vbc1e63 = "pacman.list"
) (
 input v2ff132,
 input [11:0] ve1a960,
 output [3:0] v80a7ca
);
 localparam p0 = vbc1e63;
 wire [0:3] w1;
 wire w2;
 wire [0:11] w3;
 assign v80a7ca = w1;
 assign w2 = v2ff132;
 assign w3 = ve1a960;
 vc2642c_vc5d4e1 #(
  .BMPFILE(p0)
 ) vc5d4e1 (
  .pixel(w1),
  .clk(w2),
  .addr(w3)
 );
endmodule

module vc2642c_vc5d4e1 #(
 parameter BMPFILE = 0
) (
 input clk,
 input [11:0] addr,
 output [3:0] pixel
);
 //@include SpriteROM.v
 
 SpriteROM
 #(
     .FILE(BMPFILE)
 )
 SpriteROM_01
 (
     clk,    // System clock.          
     addr,   // Address in ROM.
     pixel   // Pixel in address.        
 );
endmodule

module v8c21cf (
 input v0d69f5,
 input v02d3c7,
 input v612a7d,
 input vb399c1,
 input [7:0] vaab52b,
 input [7:0] v2e5324,
 input vc8d304,
 output [11:0] v960b1d,
 output [7:0] v627a06,
 output v5b68ad
);
 wire [0:7] w0;
 wire w1;
 wire [0:7] w2;
 wire w3;
 wire [0:11] w4;
 wire [0:7] w5;
 wire w6;
 wire w7;
 wire w8;
 wire w9;
 assign w0 = vaab52b;
 assign w1 = v02d3c7;
 assign w2 = v2e5324;
 assign w3 = vc8d304;
 assign v960b1d = w4;
 assign v627a06 = w5;
 assign w6 = vb399c1;
 assign w7 = v0d69f5;
 assign v5b68ad = w8;
 assign w9 = v612a7d;
 v8c21cf_v46d7ed v46d7ed (
  .control(w0),
  .reset(w1),
  .sprite_read(w2),
  .ready(w3),
  .position(w4),
  .sprite_write(w5),
  .activate(w6),
  .clk(w7),
  .write(w8),
  .frame(w9)
 );
endmodule

module v8c21cf_v46d7ed (
 input clk,
 input reset,
 input frame,
 input activate,
 input [7:0] control,
 input [7:0] sprite_read,
 input ready,
 output [11:0] position,
 output [7:0] sprite_write,
 output write
);
 //@include pacman.v
 
 pacman
 pacman_01
 (
     clk,            // System clock.
     reset,          // Reset.
     frame,          // New frame.
     activate,       // Activate module signal.
     control,        // External control.
                     //    {not_used, not_used, left, right, up, down, btn1, btn2}
     position,       // Position in map.
                     //    {xposition[5:0], yposition[5:0]}.
     sprite_read,    // External sprite code readed from map in position.
     ready,          // Ready signal from map. Readed sprite code ready.
     sprite_write,   // Sprite code to write in map.
     write           // We want write code spriteto map.
 );
endmodule

module v7fa690 (
 input [11:0] vd8bf03,
 input [7:0] va2a83c,
 input [11:0] vc3b221,
 input [7:0] vcbe203,
 input [2:0] v9645d6,
 output [11:0] v1dc765,
 output [7:0] vb67085
);
 wire [0:11] w0;
 wire [0:2] w1;
 wire [0:7] w2;
 wire [0:11] w3;
 wire [0:7] w4;
 wire [0:11] w5;
 wire [0:7] w6;
 assign w0 = vd8bf03;
 assign w1 = v9645d6;
 assign w2 = vcbe203;
 assign w3 = vc3b221;
 assign w4 = va2a83c;
 assign v1dc765 = w5;
 assign vb67085 = w6;
 v7fa690_v33db9d v33db9d (
  .position_0(w0),
  .select(w1),
  .sprite_1(w2),
  .position_1(w3),
  .sprite_0(w4),
  .position_out(w5),
  .sprite_out(w6)
 );
endmodule

module v7fa690_v33db9d (
 input [11:0] position_0,
 input [7:0] sprite_0,
 input [11:0] position_1,
 input [7:0] sprite_1,
 input [2:0] select,
 output [11:0] position_out,
 output [7:0] sprite_out
);
 //@include demux_actors.v
 
 demux_actors
 demux_actors_1
 (
     position_0, sprite_0,
     position_1, sprite_1,
     select,
     position_out, sprite_out
 );
endmodule

module v5a297d (
 input v0d69f5,
 input v02d3c7,
 input v612a7d,
 input vb399c1,
 input [7:0] v2e5324,
 input vc8d304,
 output [11:0] v960b1d,
 output [7:0] v627a06,
 output v5b68ad
);
 wire w0;
 wire [0:7] w1;
 wire w2;
 wire [0:11] w3;
 wire [0:7] w4;
 wire w5;
 wire w6;
 wire w7;
 wire w8;
 assign w0 = v02d3c7;
 assign w1 = v2e5324;
 assign w2 = vc8d304;
 assign v960b1d = w3;
 assign v627a06 = w4;
 assign w5 = vb399c1;
 assign w6 = v0d69f5;
 assign v5b68ad = w7;
 assign w8 = v612a7d;
 v5a297d_v46d7ed v46d7ed (
  .reset(w0),
  .sprite_read(w1),
  .ready(w2),
  .position(w3),
  .sprite_write(w4),
  .activate(w5),
  .clk(w6),
  .write(w7),
  .frame(w8)
 );
endmodule

module v5a297d_v46d7ed (
 input clk,
 input reset,
 input frame,
 input activate,
 input [7:0] sprite_read,
 input ready,
 output [11:0] position,
 output [7:0] sprite_write,
 output write
);
 //@include blinky.v
 
 blinky
 blinky_01
 (
     clk,            // System clock.
     reset,          // Reset.
     frame,          // New frame.
     activate,       // Activate module signal.
     position,       // Position in map.
                     //    {xposition[5:0], yposition[5:0]}.
     sprite_read,    // External sprite code readed from map in position.
     ready,          // Ready signal from map. Readed sprite code ready.
     sprite_write,   // Sprite code to write in map.
     write           // We want write code spriteto map.
 );
endmodule

module main_veaf5aa (
 input rcv,
 input [7:0] data,
 output [7:0] control
);
 reg [7:0] control;
 
 always @(posedge rcv)
 begin
     control <= 8'd0;
     case (data)
                  8'h6A: control[5] <= 1'b1; // j - left
                  8'h6C: control[4] <= 1'b1; // l - right
                  8'h69: control[3] <= 1'b1; // i - up
                  8'h6B: control[2] <= 1'b1; // k - down
                  8'h61: control[1] <= 1'b1; // a - btn1
                  8'h73: control[0] <= 1'b1; // s - btn2
                  8'h67: control[1:0] <=  2'b11; // g - guardar
                default: control <= 8'd0;
 
     endcase
 end
endmodule
